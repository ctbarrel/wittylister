{"version":3,"sources":["components/ListItem.js","components/ListCard.js","components/AddListerForm.js","components/AddLister.js","components/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","item","refresh","useState","done","setDone","doneClass","className","name","checked","type","onChange","target","ListCard","list","displayItems","items","map","key","_id","indexOf","Card","Header","Button","variant","onClick","fetch","process","method","then","NewListerForm","props","handleAddItem","newItems","state","x","push","setState","handleRemoveItem","index","splice","handleSelectItem","value","handleChange","handleSubmit","event","preventDefault","headers","body","JSON","stringify","hide","user","this","placeholder","id","onSubmit","Component","NewListerModal","Modal","aria-labelledby","centered","closeButton","Body","onHide","NewLister","React","modalShow","setModalShow","show","res","json","listers","userView","displayLists","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.097d7f48.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\nexport default function ListItem({item, refresh}) {\r\n    const [done, setDone] = useState(false)\r\n\r\n    function handleDone ({target}) {\r\n        setDone(target.checked)\r\n        refresh()\r\n    }\r\n\r\n    var doneClass = `its${done}`\r\n    \r\n    return (\r\n        <div className={doneClass}>\r\n            <span className='list-item'>\r\n                {item}\r\n            </span>\r\n            <input name='doneBox'\r\n            checked={done}\r\n            type='checkbox' \r\n            onChange={handleDone}/>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\nimport ListItem from './ListItem'\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL\r\n\r\nexport default function ListCard({ list, refresh }) {\r\n\r\n    const displayItems = list.items.map(\r\n        item => {\r\n            return (\r\n                <ListItem item={item}\r\n                    key={`${list._id}${list.items.indexOf(item)}`}\r\n                    refresh={refresh} />\r\n            )\r\n        }\r\n    )\r\n\r\n    function handleDelete() {\r\n        fetch(`${API_URL}listers/${list._id}`, {\r\n            method: 'DELETE'\r\n        })\r\n        .then(refresh)\r\n    }\r\n    \r\n    return (\r\n        <Card key={list._id} className='list-card'>\r\n            <Card.Header>\r\n                <p className='listname'>{list.name}</p>\r\n                <Button className='dltbtn'\r\n                variant='danger'\r\n                onClick={handleDelete}>ðŸ—‘</Button>\r\n            </Card.Header>\r\n            {displayItems}\r\n        </Card>\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL\r\n\r\nexport default class NewListerForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            user: props.user,\r\n            name: '',\r\n            items: [''],\r\n        }\r\n    }\r\n\r\n    handleAddItem = () => {\r\n        const newItems = this.state.items.map(x => x)\r\n        newItems.push('')\r\n        this.setState({items: newItems})\r\n    }\r\n\r\n    handleRemoveItem = (index) => {\r\n        const newItems = this.state.items.map(x => x)\r\n        newItems.splice(index, 1)\r\n        this.setState({items: newItems})\r\n    }\r\n\r\n    handleSelectItem = (value, index) => {\r\n        const newItems = this.state.items.map(x => x)\r\n        newItems[index] = value\r\n        this.setState({items: newItems})\r\n    }\r\n\r\n    handleChange = ({target}) => {\r\n        this.setState({[target.name]: target.value})\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        fetch(`${API_URL}listers`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': \"application/json\"\r\n            },\r\n            body: JSON.stringify(this.state)\r\n        })\r\n        .then(this.props.refresh)\r\n        .then(this.props.hide)\r\n    }\r\n\r\n    render() {\r\n\r\n        const displayItems = this.state.items.map((item, index) => {\r\n            return (\r\n                <div className='option-form' key={index}>\r\n                <input name='item'\r\n                placeholder='Enter To Do Item'\r\n                onChange={({target}) => this.handleSelectItem(target.value, index)}\r\n                value={this.state.items[index]} />\r\n                <Button variant='danger'\r\n                onClick={() => this.handleRemoveItem(index)}>\r\n                    X\r\n                </Button>\r\n                </div>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <form id='create' onSubmit={this.handleSubmit}>\r\n\r\n                <input name='name' \r\n                    value={this.state.name}\r\n                    type='text'\r\n                    onChange={this.handleChange}\r\n                    placeholder='Name of Game' \r\n                />\r\n                {displayItems}\r\n                <Button onClick={this.handleAddItem}>\r\n                    Add List Item\r\n                </Button>\r\n                <Button variant='success' type='submit'>Add List</Button>\r\n            </form>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport NewListerForm from './AddListerForm'\r\n\r\nfunction NewListerModal(props) {\r\n  return (\r\n    <Modal className='addmodal'\r\n      {...props}\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        Add List\r\n      </Modal.Header>\r\n\r\n      <Modal.Body>\r\n        <NewListerForm hide={props.onHide} user={props.user}/>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default function NewLister({ refresh, user }) {\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n\r\n  if(user === '') {\r\n    return (\r\n    <div>\r\n      Please Enter Username\r\n    </div>\r\n    )\r\n  }\r\n  return (\r\n    <>\r\n      <Button variant=\"outline-primary\" \r\n        onClick={() => {\r\n        setModalShow(true)\r\n      }}>\r\n        Add a New List\r\n      </Button>\r\n\r\n      <NewListerModal\r\n        show={modalShow}\r\n        user={user}\r\n        onHide={() => {\r\n          setModalShow(false)\r\n          refresh()\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}","import React, { Component } from 'react'\r\nimport ListCard from './ListCard'\r\nimport NewLister from './AddLister'\r\nconst API_URL = process.env.REACT_APP_API_URL\r\n\r\nexport default class extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        \r\n        this.state = {\r\n            listers: [],\r\n            userView: ''\r\n        }\r\n    }\r\n\r\n    handleChange = ({target}) => {\r\n        this.setState({[target.name]: target.value})\r\n        this.refresh()\r\n    }\r\n\r\n    refresh = () => {\r\n        fetch(`${API_URL}listers`)\r\n            .then(res => res.json())\r\n            .then(listers => this.setState({ listers }))\r\n    }\r\n\r\n    render() {\r\n\r\n        const displayLists = this.state.listers.map(\r\n            list => {\r\n                if (this.state.userView === list.user) {\r\n                    return (\r\n                        <ListCard list={list}\r\n                            refresh={this.refresh}\r\n                            key={list._id} />\r\n                    )\r\n                }\r\n            }\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                <h1>Witty Listers</h1>\r\n                <input name='userView'\r\n                value={this.state.userView}\r\n                placeholder='Enter Username Here' \r\n                onChange={this.handleChange}/> \r\n                <br /><NewLister refresh={this.refresh} user={this.state.userView}/>\r\n                <br />\r\n                {displayLists}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport Homepage from './components/Homepage'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Homepage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}